/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Front;

import Back.Producto;
import Back.Plato;
import Back.Pedido;
import Back.Mesa;
import Back.ItemPedido;
import Back.ClientePreferencial;
import java.util.ArrayList;
import javax.swing.JOptionPane;


/**
 *
 * @author DIEGO
 */
public class PedidoCrear extends javax.swing.JPanel {

    /**
     * Creates new form PedidoAgregar
     */
    public PedidoCrear() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();

        jScrollPane1.setViewportView(jTextPane1);

        jLabel1.setText("Número de mesa");

        jLabel2.setText("Nombre del plato o producto");

        jLabel3.setText("Cantidad");

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Crear Pedido");

        jLabel5.setText("Tarjeta cliente preferencial (opcional)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Inicialización de variables para manejar la información del pedido y el cliente preferencial (si lo hay)
        int numeroMesa = 0;
        boolean hayCliente = false;
        int tarjetaCliente = 0;
        String nombreItem = null;
        int cantidad = 0;
        boolean agregarOtro = true; // Bandera para controlar la repetición de agregar ítems al pedido
        int respuesta;
        ArrayList<ItemPedido> elementosPedido = new ArrayList<>(); // Lista para almacenar los ítems del pedido
        ArrayList<Pedido> listaPedidos = null; 
        ArrayList<Mesa> listaMesas = null;

        // Bucle mientras se quiera agregar otro ítem al pedido
        while (agregarOtro) {
            // Verifica si todos los campos están llenos
            if ((jTextField1.getText() != null) && (jTextField2.getText() != null) && (jTextField3.getText() != null)) {
                nombreItem = jTextField2.getText(); // Obtiene el nombre del ítem
                try {
                    numeroMesa = Integer.parseInt(jTextField1.getText()); // Obtiene el número de la mesa
                    cantidad = Integer.parseInt(jTextField3.getText()); // Obtiene la cantidad del ítem
                    if (!jTextField4.getText().isEmpty()) {
                        tarjetaCliente = Integer.parseInt(jTextField4.getText()); // Obtiene el número de tarjeta del cliente
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Ha ingresado un valor erróneo en los campos numéricos");
                }
                // Verifica si se ingresó un número de tarjeta de cliente
                if (!jTextField4.getText().isEmpty()) {
                    // Verifica si el cliente preferencial existe
                    if (ClientePreferencial.buscarBinario(tarjetaCliente) == null) {
                        JOptionPane.showMessageDialog(null, "No se encontró el cliente");
                        jTextField1.setText("");
                        jTextField2.setText("");
                        jTextField3.setText("");
                        return; // Sale del método si no se encuentra el cliente
                    } else {
                        hayCliente = true;
                    }
                }
                // Verifica si el ítem es un plato existente
                if (Plato.buscarBinario(nombreItem) != null) {
                    ItemPedido p = new ItemPedido(Plato.buscarBinario(nombreItem), cantidad);
                    elementosPedido.add(p);

                    listaPedidos = Pedido.listarBinario();
                    listaPedidos.add(new Pedido(elementosPedido));
                    Pedido.escribirBinario(listaPedidos);

                    respuesta = JOptionPane.showConfirmDialog(null, "¿Desea agregar otro item al pedido?", "Agregar plato o producto", JOptionPane.YES_NO_OPTION);
                    agregarOtro = respuesta == JOptionPane.YES_OPTION;

                    // Si no se quiere agregar más, se agrega la mesa con el pedido, considerando si hay un cliente preferencial
                    if (!agregarOtro) {
                        listaMesas = Mesa.listarBinario();
                        if (hayCliente) {
                            listaMesas.add(new Mesa(numeroMesa, new Pedido(elementosPedido), ClientePreferencial.buscarBinario(numeroMesa)));
                        } else {
                            listaMesas.add(new Mesa(numeroMesa, new Pedido(elementosPedido)));
                        }
                        Mesa.escribirBinario(listaMesas);
                        JOptionPane.showMessageDialog(null, "Pedido creado con éxito");
                        return; // Sale del método después de completar la operación
                    }
                } 
                // Verifica si el ítem es un producto existente
                else if (Producto.buscarBinario(nombreItem) != null) {
                    ItemPedido p = new ItemPedido(Producto.buscarBinario(nombreItem), cantidad);
                    elementosPedido.add(p);

                    listaPedidos = Pedido.listarBinario();
                    listaPedidos.add(new Pedido(elementosPedido));
                    Pedido.escribirBinario(listaPedidos);

                    respuesta = JOptionPane.showConfirmDialog(null, "¿Desea agregar otro item al pedido?", "Agregar plato o producto", JOptionPane.YES_NO_OPTION);
                    agregarOtro = respuesta == JOptionPane.YES_OPTION;

                    // Si no se quiere agregar más, se agrega la mesa con el pedido, considerando si hay un cliente preferencial
                    if (!agregarOtro) {
                        listaMesas = Mesa.listarBinario();
                        if (hayCliente) {
                            listaMesas.add(new Mesa(numeroMesa, new Pedido(elementosPedido), ClientePreferencial.buscarBinario(numeroMesa)));
                        } else {
                            listaMesas.add(new Mesa(numeroMesa, new Pedido(elementosPedido)));
                        }
                        Mesa.escribirBinario(listaMesas);
                        JOptionPane.showMessageDialog(null, "Pedido creado con éxito");
                        return; // Sale del método después de completar la operación
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontró el plato o producto");
                    agregarOtro = false;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe llenar todos los campos");
                agregarOtro = false;
            }
            jTextField2.setText("");
            jTextField3.setText("");
        }
        // Limpia los campos de texto después de finalizar la iteración del bucle
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");


    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
